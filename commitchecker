#!/bin/bash

########################################################
# CommitChecker Installer
# Author: Hemanth Selam
# Email: hemanth.selam@gmail.com
# License: MIT
# VERSION: 1.0.1
########################################################

VERSION="1.0.1"
AUTHOR="Hemanth Selam"
EMAIL="hemanth.selam@gmail.com"
LICENSE="MIT"

show_help() {
    cat <<EOF
Usage: $0 [-r <repository>] [--help] [--version]

Options:
  -r <repository>  Specify the repository (linux, qemu, libvirt, ovmf).
  --help           Display this help message.
  --version        Display the version information.

Instructions:
1. Choose between providing a local repository path or downloading it.
2. If providing a path, ensure it points to a valid Git repository.
3. If downloading, the repository will be cloned to your home directory.
4. Provide commit IDs (full or short); the script will process them and generate an HTML report.
EOF
}

show_version() {
    cat <<EOF
CommitChecker version $VERSION
Author: $AUTHOR
Email: $EMAIL
License: $LICENSE
EOF
}

is_git_repo() {
    git rev-parse --is-inside-work-tree > /dev/null 2>&1
}

download_repo() {
    local repo_url=$1
    local repo_dir=$2

    if [ -d "$repo_dir" ] && [ "$(ls -A "$repo_dir")" ]; then
        echo "Directory $repo_dir already exists and is not empty. Using the existing repository."
    else
        echo "Downloading repository..."
        git clone "$repo_url" "$repo_dir"
        echo "Repository downloaded to $repo_dir."
    fi
    cd "$repo_dir" || exit
    git checkout master
}

process_commits() {
    local repo_dir=$1
    local base_url=$2
    local output_file="$HOME/commit_versions.html"

    echo "Processing commit IDs..."
    echo "<html><body><table border='1'><tr><th>Commit ID</th><th>Commit Message</th><th>Sort Number</th><th>Version</th></tr>" > "$output_file"

    local sort_number=1
    while IFS= read -r commit_id; do
        # Ensure full commit ID
        if [ ${#commit_id} -lt 40 ]; then
            full_commit_id=$(git rev-parse "$commit_id" 2>/dev/null)
        else
            full_commit_id=$commit_id
        fi

        if [ -z "$full_commit_id" ]; then
            echo "<tr><td colspan='4'>Invalid commit ID: $commit_id</td></tr>" >> "$output_file"
            continue
        fi

        short_id=$(echo "$full_commit_id" | cut -c 1-12)
        commit_message=$(git log -n 1 --pretty=format:%s "$full_commit_id")
        version=$(git tag --contains "$full_commit_id" --sort=taggerdate | head -n 1)

        echo "<tr><td><a href=\"$base_url$full_commit_id\">$short_id</a></td><td>$commit_message</td><td>$sort_number</td><td>${version:-None}</td></tr>" >> "$output_file"
        ((sort_number++))
    done < "$repo_dir/temp_commit_ids.txt"

    echo "</table></body></html>" >> "$output_file"
    echo "Output saved to $output_file"
}

main() {
    local repo_name=""
    local repo_url=""
    local base_url=""
    local repo_dir=""

    while [[ "$1" =~ ^- ]]; do
        case $1 in
            -r )
                shift; repo_name=$1
                ;;
            --help )
                show_help
                exit 0
                ;;
            --version )
                show_version
                exit 0
                ;;
            * )
                echo "Unknown option: $1"
                show_help
                exit 1
                ;;
        esac
        shift
    done

    if [ -z "$repo_name" ]; then
        echo "Repository name is required."
        show_help
        exit 1
    fi

    case $repo_name in
        linux)
            repo_url="https://github.com/torvalds/linux.git"
            base_url="https://github.com/torvalds/linux/commit/"
            ;;
        qemu)
            repo_url="https://github.com/qemu/qemu.git"
            base_url="https://github.com/qemu/qemu/commit/"
            ;;
        libvirt)
            repo_url="https://github.com/libvirt/libvirt.git"
            base_url="https://github.com/libvirt/libvirt/commit/"
            ;;
        ovmf)
            repo_url="https://github.com/tianocore/edk2.git"
            base_url="https://github.com/tianocore/edk2/commit/"
            ;;
        *)
            echo "Unsupported repository: $repo_name"
            exit 1
            ;;
    esac

    repo_dir="$HOME/${repo_name}-stable-repo"

    echo "Choose an option:"
    echo "1. Provide the path of the stable repository"
    echo "2. Download the stable repository"
    read -rp "Enter your choice (1 or 2): " choice

    case $choice in
        1)
            read -rp "Enter the path of the stable repository: " repo_path
            if [ -d "$repo_path" ]; then
                cd "$repo_path" || exit
                if ! is_git_repo; then
                    echo "The specified path is not a Git repository. Downloading the stable repository instead."
                    download_repo "$repo_url" "$repo_dir"
                fi
            else
                echo "Invalid path. Downloading the stable repository instead."
                download_repo "$repo_url" "$repo_dir"
            fi
            ;;
        2)
            download_repo "$repo_url" "$repo_dir"
            ;;
        *)
            echo "Invalid choice. Exiting."
            exit 1
            ;;
    esac

    echo "Enter the commit IDs (one per line, end with an empty line):"
    commit_ids=()
    while IFS= read -r commit_id && [ -n "$commit_id" ]; do
        commit_ids+=("$commit_id")
    done

    if [ ${#commit_ids[@]} -eq 0 ]; then
        echo "No commit IDs provided. Exiting."
        exit 1
    fi

    mkdir -p "$repo_dir"
    printf "%s\n" "${commit_ids[@]}" > "$repo_dir/temp_commit_ids.txt"

    # Run the process in the background
    (process_commits "$repo_dir" "$base_url" &> /dev/null &) &
    process_id=$!
    echo "Processing in the background. Process ID: $process_id"
    echo "Output will be saved to $HOME/commit_versions.html"

    # Notify user of completion in the background process
    echo "The process is running. You will be notified once the HTML file is ready."
}

main "$@"

